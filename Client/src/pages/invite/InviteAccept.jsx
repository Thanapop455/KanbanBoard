// src/pages/invite/InviteAccept.jsx
import React, { useEffect, useRef, useState } from "react";
import { useParams, useLocation, useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import useKanbanStore from "../../store/kanbanStore";
import { acceptInvite } from "../../api/board";
import { Sw } from "../../ui/swal-helpers";

const InviteAccept = () => {
  const { token: tokenFromPath } = useParams(); // /invite/:token
  const location = useLocation();
  const navigate = useNavigate();
  const { token: authToken } = useKanbanStore();
  const [msg, setMsg] = useState("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç...");
  const didRun = useRef(false);               // üëà ‡∏Å‡∏±‡∏ô‡∏£‡∏≠‡∏ö‡∏™‡∏≠‡∏á‡∏à‡∏≤‡∏Å StrictMode

  useEffect(() => {
    if (didRun.current) return;               // üëà ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏£‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏ã‡πâ‡∏≥
    didRun.current = true;

    // ‡∏≠‡πà‡∏≤‡∏ô token ‡∏à‡∏≤‡∏Å path ‡∏´‡∏£‡∏∑‡∏≠ query
    const query = new URLSearchParams(location.search);
    const tokenFromQuery = query.get("token") || query.get("invite");
    const inviteToken = tokenFromPath || tokenFromQuery;

    if (!inviteToken) {
      navigate("/app", { replace: true });
      return;
    }

    if (!authToken) {
      setMsg("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
      // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
      const next = encodeURIComponent(location.pathname + location.search);
      navigate(`/login?next=${next}`, { replace: true });
      return;
    }

    (async () => {
      try {
        const res = await acceptInvite(authToken, inviteToken);
        const boardId = res?.data?.board?.id ?? res?.data?.boardId;
        toast.success("‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        navigate(boardId ? `/app/board/${boardId}` : "/app", { replace: true });
      } catch (err) {
        const message = err?.response?.data?.message || "‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏";
        await Sw.fire({ icon: "error", title: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", text: message });
        setMsg(message);
        navigate("/app", { replace: true });
      }
    })();

  }, []); // üëà ‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏û‡∏≠


  return (
    <div className="p-6 text-center text-slate-300">
      <p>{msg}</p>
    </div>
  );
};

export default InviteAccept;
